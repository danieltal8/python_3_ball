import tkinter as tk

width = 900
height = 500
bgcolor = 'black'


class BallGame:

    def __init__(self):
        root = tk.Tk()
        canvas_big = tk.Canvas(root, width=width * 2, height=height * 2, bd=10)
        canvas_big.pack()
        self.canvas = tk.Canvas(bg=bgcolor, width=width, height=height)
        self.canvas.pack()
        canvas_big.create_window(width, height, window=self.canvas)

        b = tk.Button(canvas_big, text="invert colors", command=self.invert_color)
        canvas_big.create_window(width, 1.6 * height, window=b)

        self.ball = self.canvas.create_oval(430, 10, 470, 50, fill='green')

        self.platform_y = height - 20
        self.platform = self.canvas.create_rectangle(width // 2 - 50, self.platform_y, width // 2 + 50,
                                                     self.platform_y + 10, fill='black')

        # ball moving speed
        self.xspeed = self.yspeed = 2

        self.canvas.bind_all('<Right>', self.board_right)
        self.canvas.bind_all('<Left>', self.board_left)

        self.move_ball()

        root.mainloop()

    def invert_color(self):
        if self.canvas["background"] == 'black':
            self.canvas.configure(bg='white')
        else:
            self.canvas.configure(bg='black')

    def move_ball(self):
        global xspeed, yspeed
        x1, y1, x2, y2 = self.canvas.coords(self.ball)
        if x1 <= 0 or x2 >= width:
            # hit wall, reverse x speed
            self.xspeed = -self.xspeed
        if y1 <= 0:
            # hit top wall
            yspeed = 2
        elif y2 >= self.platform_y:
            # calculate center x of the ball
            cx = (x1 + x2) // 2
            # check whether platform is hit
            px1, _, px2, _ = self.canvas.coords(self.platform)
            if px1 <= cx <= px2:
                yspeed = -2
            else:
                self.canvas.create_text(width // 2, height // 2, text='Game Over', font=('Arial Bold', 32), fill='red')
                return
        self.canvas.move(self.ball, self.xspeed, self.yspeed)
        self.canvas.after(20, self.move_ball)

    def board_right(self):
        x1, y1, x2, y2 = self.canvas.coords(self.platform)
        # make sure the platform is not moved beyond right wall
        if x2 < width:
            dx = min(width - x2, 10)
            self.canvas.move(self.platform, dx, 0)

    def board_left(self):
        x1, y1, x2, y2 = self.canvas.coords(self.platform)
        # make sure the platform is not moved beyond left wall
        if x1 > 0:
            dx = min(x1, 10)
            self.canvas.move(self.platform, -dx, 0)


b = BallGame()


class WindowCanvas(tk.Canvas):

    def __init__(self, **kw):
        super().__init__(**kw)
        self.ball_game = BallGame()
        self.ball_game.move_ball()
